{"ast":null,"code":"var _jsxFileName = \"C:\\\\coding\\\\BuildSpaceNFTSOL\\\\root\\\\app\\\\src\\\\CandyMachine\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport React, { useEffect, useState } from 'react';\nimport { candyMachineProgram, TOKEN_METADATA_PROGRAM_ID, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  metadata: {\n    Metadata,\n    MetadataProgram\n  }\n} = programs;\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst {\n  SystemProgram\n} = web3;\nconst opts = {\n  preflightCommitment: 'processed'\n};\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = _ref => {\n  _s();\n\n  let {\n    walletAddress\n  } = _ref;\n  const [machineStats, setMachineStats] = useState(null); // New state property\n\n  const [mints, setMints] = useState([]); // Add these two state properties\n\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false); // Actions\n\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST);\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(connection, {\n      filters: [{\n        memcmp: {\n          offset: 1 + 32 + 32 + 4 + MAX_NAME_LENGTH + 4 + MAX_URI_LENGTH + 4 + MAX_SYMBOL_LENGTH + 2 + 1 + 4 + 0 * MAX_CREATOR_LEN,\n          bytes: hash\n        }\n      }]\n    });\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getMasterEdition = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (await web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID))[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(walletAddress.publicKey, mint.publicKey);\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY\n      };\n      const signers = [mint];\n      const instructions = [web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID\n      }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, walletAddress.publicKey, walletAddress.publicKey), createAssociatedTokenAccountInstruction(token, walletAddress.publicKey, walletAddress.publicKey, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, walletAddress.publicKey, [], 1)];\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions\n      });\n      console.log('txn:', txn); // Setup listener\n\n      connection.onSignatureWithOptions(txn, async (notification, context) => {\n        if (notification.type === 'status') {\n          console.log('Receievd status event');\n          const {\n            result\n          } = notification;\n\n          if (!result.err) {\n            console.log('NFT Minted!'); //set our flag to fasle as aour NFT has been minted! \n\n            setIsMinting(false);\n            await getCandyMachineState();\n          }\n        }\n      }, {\n        commitment: 'processed'\n      });\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!'; //if an error, set loading flag to false\n\n      setIsMinting(false);\n\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {} else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n    const keys = [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([])\n    });\n  };\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST; // Create a new connection object\n\n    const connection = new Connection(rpcHost); // Create a new Solana provider object\n\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Declare getCandyMachineState as an async method\n\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider(); // Get metadata about your deployed candy machine program\n\n    const idl = await Program.fetchIdl(candyMachineProgram, provider); // Create a program that you can call\n\n    const program = new Program(idl, candyMachineProgram, provider); // Fetch the metadata from your candy machine\n\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID); // Parse out all our metadata and log it out\n\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber(); // We will be using this later in our UI so let's generate this now\n\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toLocaleDateString()} @ ${new Date(goLiveData * 1000).toLocaleTimeString()}`; // Add this data to your state to render\n\n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString\n    });\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString\n    });\n    const data = await fetchHashTable(process.env.REACT_APP_CANDY_MACHINE_ID, true);\n\n    if (data.length !== 0) {\n      for (const mint of data) {\n        // Get URI\n        const response = await fetch(mint.data.uri);\n        const parse = await response.json();\n        console.log(\"Past Minted NFT\", mint); // Get image URI\n\n        if (!mints.find(mint => mint === parse.image)) {\n          setMints(prevState => [...prevState, parse.image]);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const renderMintedItems = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gif-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: \"Minted Items \\u2728\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: mints.map(mint => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mint,\n          alt: `Minted NFT ${mint}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)\n      }, mint, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 3\n  }, this);\n\n  return (// Only show this if machineStats is available\n    machineStats && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"machine-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Drop Date: ${machineStats.goLiveDateTimeString}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        onClick: mintToken,\n        children: [\"disabled=\", isMinting, \"Mint NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 7\n      }, this), mints.length > 0 && renderMintedItems()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(CandyMachine, \"sVNp0t+sWePLadR0tcswzzFeABU=\");\n\n_c = CandyMachine;\nexport default CandyMachine;\n\nvar _c;\n\n$RefreshReg$(_c, \"CandyMachine\");","map":{"version":3,"sources":["C:/coding/BuildSpaceNFTSOL/root/app/src/CandyMachine/index.js"],"names":["Connection","PublicKey","Program","Provider","web3","MintLayout","TOKEN_PROGRAM_ID","Token","programs","React","useEffect","useState","candyMachineProgram","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","metadata","Metadata","MetadataProgram","config","process","env","REACT_APP_CANDY_MACHINE_CONFIG","SystemProgram","opts","preflightCommitment","MAX_NAME_LENGTH","MAX_URI_LENGTH","MAX_SYMBOL_LENGTH","MAX_CREATOR_LEN","CandyMachine","walletAddress","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","fetchHashTable","hash","metadataEnabled","connection","REACT_APP_SOLANA_RPC_HOST","metadataAccounts","getProgramAccounts","filters","memcmp","offset","bytes","mintHashes","index","length","account","accountInfo","getParsedAccountInfo","pubkey","toString","value","push","data","mint","getMetadata","findProgramAddress","Buffer","from","toBuffer","getMasterEdition","getTokenWallet","wallet","mintToken","Keypair","generate","token","publicKey","masterEdition","rpcHost","rent","getMinimumBalanceForRentExemption","span","accounts","candyMachine","REACT_APP_CANDY_MACHINE_ID","payer","REACT_APP_TREASURY_ADDRESS","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","provider","getProvider","idl","fetchIdl","program","txn","rpc","mintNft","console","log","onSignatureWithOptions","notification","context","type","result","err","getCandyMachineState","commitment","error","message","msg","indexOf","code","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","window","solana","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toLocaleDateString","toLocaleTimeString","response","uri","parse","json","find","image","prevState","renderMintedItems","map"],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { programs } from '@metaplex/js';\r\nimport './CandyMachine.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  candyMachineProgram,\r\n  TOKEN_METADATA_PROGRAM_ID,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './helpers';\r\nconst {\r\n  metadata: { Metadata, MetadataProgram },\r\n} = programs;\r\n\r\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\r\nconst { SystemProgram } = web3;\r\nconst opts = {\r\n  preflightCommitment: 'processed',\r\n};\r\n\r\nconst MAX_NAME_LENGTH = 32;\r\nconst MAX_URI_LENGTH = 200;\r\nconst MAX_SYMBOL_LENGTH = 10;\r\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\r\n\r\nconst CandyMachine = ({ walletAddress }) => {\r\n  const [machineStats, setMachineStats] = useState(null);\r\n  // New state property\r\n  const [mints, setMints] = useState([]);\r\n  // Add these two state properties\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\r\n  \r\n\r\n  // Actions\r\n  const fetchHashTable = async (hash, metadataEnabled) => {\r\n    const connection = new web3.Connection(\r\n      process.env.REACT_APP_SOLANA_RPC_HOST\r\n    );\r\n\r\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\r\n      connection,\r\n      {\r\n        filters: [\r\n          {\r\n            memcmp: {\r\n              offset:\r\n                1 +\r\n                32 +\r\n                32 +\r\n                4 +\r\n                MAX_NAME_LENGTH +\r\n                4 +\r\n                MAX_URI_LENGTH +\r\n                4 +\r\n                MAX_SYMBOL_LENGTH +\r\n                2 +\r\n                1 +\r\n                4 +\r\n                0 * MAX_CREATOR_LEN,\r\n              bytes: hash,\r\n            },\r\n          },\r\n        ],\r\n      }\r\n    );\r\n\r\n    const mintHashes = [];\r\n\r\n    for (let index = 0; index < metadataAccounts.length; index++) {\r\n      const account = metadataAccounts[index];\r\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\r\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\r\n      if (metadataEnabled) mintHashes.push(metadata.data);\r\n      else mintHashes.push(metadata.data.mint);\r\n    }\r\n\r\n    return mintHashes;\r\n    \r\n  };\r\n\r\n  const getMetadata = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const getMasterEdition = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const getTokenWallet = async (wallet, mint) => {\r\n    return (\r\n      await web3.PublicKey.findProgramAddress(\r\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const mintToken = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      const mint = web3.Keypair.generate();\r\n      const token = await getTokenWallet(\r\n        walletAddress.publicKey,\r\n        mint.publicKey\r\n      );\r\n      const metadata = await getMetadata(mint.publicKey);\r\n      const masterEdition = await getMasterEdition(mint.publicKey);\r\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n      const connection = new Connection(rpcHost);\r\n      const rent = await connection.getMinimumBalanceForRentExemption(\r\n        MintLayout.span\r\n      );\r\n\r\n      const accounts = {\r\n        config,\r\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\r\n        payer: walletAddress.publicKey,\r\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\r\n        mint: mint.publicKey,\r\n        metadata,\r\n        masterEdition,\r\n        mintAuthority: walletAddress.publicKey,\r\n        updateAuthority: walletAddress.publicKey,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: web3.SYSVAR_RENT_PUBKEY,\r\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\r\n      };\r\n\r\n      const signers = [mint];\r\n      const instructions = [\r\n        web3.SystemProgram.createAccount({\r\n          fromPubkey: walletAddress.publicKey,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports: rent,\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          walletAddress.publicKey,\r\n          walletAddress.publicKey\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          token,\r\n          walletAddress.publicKey,\r\n          walletAddress.publicKey,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          token,\r\n          walletAddress.publicKey,\r\n          [],\r\n          1\r\n        ),\r\n      ];\r\n\r\n      const provider = getProvider();\r\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n      const program = new Program(idl, candyMachineProgram, provider);\r\n\r\n      const txn = await program.rpc.mintNft({\r\n        accounts,\r\n        signers,\r\n        instructions,\r\n      });\r\n\r\n      console.log('txn:', txn);\r\n\r\n      // Setup listener\r\n      connection.onSignatureWithOptions(\r\n        txn,\r\n        async (notification, context) => {\r\n          if (notification.type === 'status') {\r\n            console.log('Receievd status event');\r\n\r\n            const { result } = notification;\r\n            if (!result.err) {\r\n              console.log('NFT Minted!');\r\n              //set our flag to fasle as aour NFT has been minted! \r\n              setIsMinting(false);\r\n              await getCandyMachineState();\r\n            }\r\n          }\r\n        },\r\n        { commitment: 'processed' }\r\n      );\r\n    } catch (error) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n\r\n      //if an error, set loading flag to false\r\n      setIsMinting(false);\r\n\r\n      if (!error.msg) {\r\n        if (error.message.indexOf('0x138')) {\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      console.warn(message);\r\n    }\r\n  };\r\n\r\n  const createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress,\r\n    payer,\r\n    walletAddress,\r\n    splTokenMintAddress\r\n  ) => {\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SystemProgram.programId,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n    ];\r\n    return new web3.TransactionInstruction({\r\n      keys,\r\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n      data: Buffer.from([]),\r\n    });\r\n  };\r\n\r\n\r\n\r\n  const getProvider = () => {\r\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n    // Create a new connection object\r\n    const connection = new Connection(rpcHost);\r\n    \r\n    // Create a new Solana provider object\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    \r\n  return provider;\r\n};\r\n    \r\n  \r\n  // Declare getCandyMachineState as an async method\r\nconst getCandyMachineState = async () => { \r\n  const provider = getProvider();\r\n  \r\n  // Get metadata about your deployed candy machine program\r\n  const idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n\r\n  // Create a program that you can call\r\n  const program = new Program(idl, candyMachineProgram, provider);\r\n\r\n  // Fetch the metadata from your candy machine\r\n  const candyMachine = await program.account.candyMachine.fetch(\r\n    process.env.REACT_APP_CANDY_MACHINE_ID\r\n  );\r\n  \r\n  // Parse out all our metadata and log it out\r\n  const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const goLiveData = candyMachine.data.goLiveDate.toNumber();\r\n\r\n  // We will be using this later in our UI so let's generate this now\r\nconst goLiveDateTimeString = `${new Date(\r\n  goLiveData * 1000\r\n).toLocaleDateString()} @ ${new Date(\r\n  goLiveData * 1000\r\n).toLocaleTimeString()}`;\r\n\r\n    // Add this data to your state to render\r\n  setMachineStats({\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      goLiveData,\r\n      goLiveDateTimeString,\r\n    });\r\n\r\n  console.log({\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveData,\r\n    goLiveDateTimeString,\r\n  });\r\n\r\n  const data = await fetchHashTable(\r\n    process.env.REACT_APP_CANDY_MACHINE_ID,\r\n    true\r\n  );\r\n  \r\n  if (data.length !== 0) {\r\n    for (const mint of data) {\r\n      // Get URI\r\n      const response = await fetch(mint.data.uri);\r\n      const parse = await response.json();\r\n      console.log(\"Past Minted NFT\", mint)\r\n  \r\n      // Get image URI\r\n      if (!mints.find((mint) => mint === parse.image)) {\r\n        setMints((prevState) => [...prevState, parse.image]);\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  getCandyMachineState();\r\n}, []);\r\n\r\n\r\nconst renderMintedItems = () => (\r\n  <div className=\"gif-container\">\r\n    <p className=\"sub-text\">Minted Items ✨</p>\r\n    <div className=\"gif-grid\">\r\n      {mints.map((mint) => (\r\n        <div className=\"gif-item\" key={mint}>\r\n          <img src={mint} alt={`Minted NFT ${mint}`} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n  \r\n\r\nreturn (\r\n  // Only show this if machineStats is available\r\n  machineStats && (\r\n    <div className=\"machine-container\">\r\n      <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>\r\n      <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\r\n      <button className=\"cta-button mint-button\" onClick={mintToken}>\r\n        disabled={isMinting}\r\n          Mint NFT\r\n      </button>\r\n      {/* If we have mints available in our array, let's render some items */}\r\n      {mints.length > 0 && renderMintedItems()}\r\n    </div>\r\n  )\r\n);\r\n};\r\n\r\nexport default CandyMachine;\r\n"]},"metadata":{},"sourceType":"module"}